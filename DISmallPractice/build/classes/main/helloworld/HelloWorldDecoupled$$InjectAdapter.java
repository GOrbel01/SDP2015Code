// Code generated by dagger-compiler.  Do not edit.
package helloworld;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<HelloWorldDecoupled>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code HelloWorldDecoupled} and its
 * dependencies.
 *
 * Being a {@code Provider<HelloWorldDecoupled>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<HelloWorldDecoupled>} and handling injection
 * of annotated fields.
 */
public final class HelloWorldDecoupled$$InjectAdapter extends Binding<HelloWorldDecoupled>
    implements Provider<HelloWorldDecoupled>, MembersInjector<HelloWorldDecoupled> {
  private Binding<MessageWriter> writer;

  public HelloWorldDecoupled$$InjectAdapter() {
    super("helloworld.HelloWorldDecoupled", "members/helloworld.HelloWorldDecoupled", NOT_SINGLETON, HelloWorldDecoupled.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    writer = (Binding<MessageWriter>) linker.requestBinding("helloworld.MessageWriter", HelloWorldDecoupled.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(writer);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<HelloWorldDecoupled>}.
   */
  @Override
  public HelloWorldDecoupled get() {
    HelloWorldDecoupled result = new HelloWorldDecoupled();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<HelloWorldDecoupled>}.
   */
  @Override
  public void injectMembers(HelloWorldDecoupled object) {
    object.writer = writer.get();
  }

}
