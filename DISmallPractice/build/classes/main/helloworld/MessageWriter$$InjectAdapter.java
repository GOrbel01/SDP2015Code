// Code generated by dagger-compiler.  Do not edit.
package helloworld;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<MessageWriter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code MessageWriter} and its
 * dependencies.
 *
 * Being a {@code Provider<MessageWriter>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<MessageWriter>} and handling injection
 * of annotated fields.
 */
public final class MessageWriter$$InjectAdapter extends Binding<MessageWriter>
    implements Provider<MessageWriter>, MembersInjector<MessageWriter> {
  private Binding<MessageRenderer> renderer;
  private Binding<MessageProvider> provider;

  public MessageWriter$$InjectAdapter() {
    super("helloworld.MessageWriter", "members/helloworld.MessageWriter", NOT_SINGLETON, MessageWriter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    renderer = (Binding<MessageRenderer>) linker.requestBinding("helloworld.MessageRenderer", MessageWriter.class, getClass().getClassLoader());
    provider = (Binding<MessageProvider>) linker.requestBinding("helloworld.MessageProvider", MessageWriter.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(renderer);
    injectMembersBindings.add(provider);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<MessageWriter>}.
   */
  @Override
  public MessageWriter get() {
    MessageWriter result = new MessageWriter();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<MessageWriter>}.
   */
  @Override
  public void injectMembers(MessageWriter object) {
    object.renderer = renderer.get();
    object.provider = provider.get();
  }

}
