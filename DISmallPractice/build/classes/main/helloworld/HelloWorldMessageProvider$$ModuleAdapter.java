// Code generated by dagger-compiler.  Do not edit.
package helloworld;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class HelloWorldMessageProvider$$ModuleAdapter extends ModuleAdapter<HelloWorldMessageProvider> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public HelloWorldMessageProvider$$ModuleAdapter() {
    super(helloworld.HelloWorldMessageProvider.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public HelloWorldMessageProvider newModule() {
    return new helloworld.HelloWorldMessageProvider();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, HelloWorldMessageProvider module) {
    bindings.contributeProvidesBinding("java.lang.String", new GetMessageProvidesAdapter(module));
  }

  /**
   * A {@code Binding<java.lang.String>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.lang.String>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetMessageProvidesAdapter extends ProvidesBinding<String>
      implements Provider<String> {
    private final HelloWorldMessageProvider module;

    public GetMessageProvidesAdapter(HelloWorldMessageProvider module) {
      super("java.lang.String", NOT_SINGLETON, "helloworld.HelloWorldMessageProvider", "getMessage");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.lang.String>}.
     */
    @Override
    public String get() {
      return module.getMessage();
    }
  }
}
