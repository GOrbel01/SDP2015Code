// Code generated by dagger-compiler.  Do not edit.
package helloworld;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<StandardOutMessageRenderer>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code StandardOutMessageRenderer} and its
 * dependencies.
 *
 * Being a {@code Provider<StandardOutMessageRenderer>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<StandardOutMessageRenderer>} and handling injection
 * of annotated fields.
 */
public final class StandardOutMessageRenderer$$InjectAdapter extends Binding<StandardOutMessageRenderer>
    implements Provider<StandardOutMessageRenderer>, MembersInjector<StandardOutMessageRenderer> {
  private Binding<MessageProvider> messageProvider;

  public StandardOutMessageRenderer$$InjectAdapter() {
    super("helloworld.StandardOutMessageRenderer", "members/helloworld.StandardOutMessageRenderer", NOT_SINGLETON, StandardOutMessageRenderer.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    messageProvider = (Binding<MessageProvider>) linker.requestBinding("helloworld.MessageProvider", StandardOutMessageRenderer.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(messageProvider);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<StandardOutMessageRenderer>}.
   */
  @Override
  public StandardOutMessageRenderer get() {
    StandardOutMessageRenderer result = new StandardOutMessageRenderer();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<StandardOutMessageRenderer>}.
   */
  @Override
  public void injectMembers(StandardOutMessageRenderer object) {
    object.messageProvider = messageProvider.get();
  }

}
